spring:
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 55 # [기본값: 10] 커넥션 풀의 최대 커넥션 수
      minimum-idle: 55 # [기본값: 10] 커넥션 풀의 최소 커넥션 수
      connection-timeout: 3000 # [기본값: 30000ms] 커넥션을 획득할 때까지 기다리는 최대 시간 (ms)

  session:
    store-type: redis # 세션 저장소를 Redis로 설정 (Session 기반 인증)

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      timeout: 3000ms # Redis timeout

  jpa:
    hibernate:
      ddl-auto: create  # 배포에서는 update 또는 validate 권장
    properties:
      dialect: org.hibernate.dialect.MySQL8Dialect
      hibernate:
        default_batch_fetch_size: 100
    open-in-view: false  # OSIV 끄기 (실무에서 리소스 낭비 방지)

  web:
    resources:
      add-mappings: false # Spring WebMVC의 정적 리소스 경로 매핑 비활성화

server:
  servlet:
    session:
      tracking-modes: cookie
      cookie:
        name: JSESSIONID # 세션 쿠키 이름 설정

  # 톰캣의 스레드 풀 개수, 사용 스레드 수, 대기 큐 사이즈 등을 모니터링하기 위해 설정
  tomcat:
    mbeanregistry:
      enabled: true
    threads:
      max: 45 # [기본값: 200] 동시에 처리할 최대 스레드 수
      min-spare: 45 # [기본값: 10] 초기 생성 및 유휴 상태로 유지할 최소 스레드 수
    accept-count: 100 # [기본값: 100] 대기 큐 사이즈
    max-connections: 10000  # [기본값: 10000] 동시에 유지 가능한 커넥션 수 (Http keep-alive 포함)

payment:
  toss:
    secret: ${PAYMENT_TOSS_SECRET}

cloud:
  aws:
    stack:
      auto: false
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: ${AWS_S3_BUCKET}

# 모든 엔드포인트를 웹에 노출 -> "*"
management:
  # 일반적으로 모든 엔드포인트를 노출하지 않음
  endpoints:
    web:
      exposure:
        include: "health,prometheus"

  # /actuator/health 정보를 더 자세히 보기 위해 설정(상태값만 출력)
  endpoint:
    health:
      show-details: always

logging:
  level:
    root: info
  file:
    name: logs/app.log # 로그 파일 이름
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
