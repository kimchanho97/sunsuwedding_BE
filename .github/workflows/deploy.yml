name: Deploy to EC2

on:
  push:
    branches:
      - main  # 🚀 main 브랜치에 push될 때 실행

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle 캐싱 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 테스트 실행 (가장 먼저, 빠른 피드백)
      - name: Run tests
        run: ./gradlew test --stacktrace

      # 테스트 결과 리포트 업로드 (실패해도 결과 확인 가능)
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()  # 테스트 실패해도 결과 업로드
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/

  CI:
    needs: [ test ]  # 테스트 성공 후에만 빌드 진행
    runs-on: ubuntu-latest

    steps:
      # 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # Docker Buildx 설정(빌드 최적화)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 🐳 Docker 이미지 빌드 & 푸시 (테스트 제외)
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/sunsuwedding:latest

  CD:
    needs: [ CI ]
    runs-on: ubuntu-latest

    steps:
      # 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # PROD_ENV_FILE을 그대로 env 파일로 생성
      - name: Create .env file
        run: |
          echo "${{ secrets.PROD_ENV_FILE }}" > .env

      # deploy.sh와 docker-compose.yml 파일을 EC2로 전송
      - name: Transfer deploy script and docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./deploy/*"
          target: "~/sunsuwedding-deploy/"
          strip_components: 1

      # nginx 폴더 전송
      - name: Transfer nginx folder to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./nginx"
          target: "~/sunsuwedding-deploy/"

      # SSH Private Key를 사용하여 EC2에 로그인 후 .env 파일 전송
      - name: Transfer .env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./.env"
          target: "~/sunsuwedding-deploy/"

      # SSH Private Key를 사용하여 EC2에 로그인
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/sunsuwedding-deploy
            chmod +x deploy.sh
            ./deploy.sh